{
  "nodes": [
    {
      "id": "1",
      "parameters": {
        "httpMethod": "POST",
        "path": "blog-extractor",
        "responseMode": "lastNode",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "id": "2",
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {
          "timeout": 30000,
          "headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
            "Accept-Language": "en-US,en;q=0.5",
            "Accept-Encoding": "gzip, deflate",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1"
          }
        }
      },
      "name": "Fetch Blog Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [400, 300]
    },
    {
      "id": "3",
      "parameters": {
        "functionCode": "// Enhanced blog content extraction\nconst cheerio = require('cheerio');\nconst html = $json.data;\n\nif (!html) {\n  return [{\n    json: {\n      error: 'No content found at the URL',\n      content: ''\n    }\n  }];\n}\n\n// Load HTML with cheerio\nconst $ = cheerio.load(html);\n\n// Remove unwanted elements more thoroughly\n$('script, style, nav, header, footer, aside, .advertisement, .ads, .sidebar, .comments, .comment, .social-share, .newsletter, .popup, .modal, .banner, .navigation, .menu, .breadcrumb, .pagination, .related-posts, .author-bio, .tags, .categories, .share-buttons, noscript, iframe, .cookie-notice, .gdpr-notice').remove();\n\n// Extract title\nlet title = $('title').text().trim() || $('h1').first().text().trim() || $('meta[property=\"og:title\"]').attr('content') || 'No title found';\n\n// Try to find the main content using improved selectors\nlet content = '';\nconst contentSelectors = [\n  'article',\n  '.post-content',\n  '.entry-content',\n  '.content',\n  'main',\n  '.post',\n  '.article-content',\n  '.blog-content',\n  '.post-body',\n  '.entry-body',\n  '[role=\"main\"]',\n  '.container .content',\n  '.main-content',\n  '.story-body',\n  '.article-body',\n  '.post-text',\n  '.entry-text',\n  '.blog-post-content',\n  '.single-post-content'\n];\n\nfor (const selector of contentSelectors) {\n  const element = $(selector);\n  if (element.length > 0) {\n    content = element.text().trim();\n    if (content.length > 500) {\n      break;\n    }\n  }\n}\n\n// Enhanced fallback strategies\nif (!content || content.length < 500) {\n  // Try paragraphs within main content areas\n  const paragraphs = $('main p, article p, .content p, .post p').map((i, el) => $(el).text().trim()).get();\n  if (paragraphs.length > 0) {\n    content = paragraphs.join(' ');\n  }\n}\n\n// Final fallback: get body text\nif (!content || content.length < 500) {\n  content = $('body').text().trim();\n}\n\n// Clean up the content more thoroughly\ncontent = content\n  .replace(/\\s+/g, ' ')  // Replace multiple spaces with single space\n  .replace(/\\n\\s*\\n/g, '\\n')  // Replace multiple newlines with single newline\n  .replace(/\\t/g, ' ')  // Replace tabs with spaces\n  .replace(/[^\\w\\s\\.,!?;:()\\-\"/\\n]/g, '')  // Remove special characters but keep basic punctuation\n  .trim();\n\n// Remove common unwanted text patterns\nconst unwantedPatterns = [\n  /Cookie Policy/gi,\n  /Privacy Policy/gi,\n  /Terms of Service/gi,\n  /Subscribe to our newsletter/gi,\n  /Follow us on/gi,\n  /Share this article/gi,\n  /Read more/gi,\n  /Continue reading/gi,\n  /\\bAdvertisement\\b/gi,\n  /\\bAds by Google\\b/gi\n];\n\nunwantedPatterns.forEach(pattern => {\n  content = content.replace(pattern, '');\n});\n\n// Limit content length for API efficiency\nif (content.length > 10000) {\n  content = content.substring(0, 10000) + '...';\n}\n\nif (content.length < 100) {\n  return [{\n    json: {\n      error: 'Content too short or not extractable',\n      content: content,\n      title: title\n    }\n  }];\n}\n\nconsole.log('Extracted content length:', content.length);\nconsole.log('Title:', title);\n\nreturn [{\n  json: {\n    content: content,\n    url: $json.url || '',\n    title: title\n  }\n}];"
      },
      "name": "Extract Blog Content",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [600, 300]
    },
    {
      "id": "4",
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "method": "POST",
        "authentication": "none",
        "responseFormat": "json",
        "jsonParameters": true,
        "options": {
          "timeout": 60000
        },
        "headers": [
          {
            "name": "Content-Type",
            "value": "application/json"
          },
          {
            "name": "Authorization",
            "value": "Bearer {{ $env.OPENAI_API_KEY }}"
          }
        ],
        "bodyParametersJson": "{\n  \"model\": \"gpt-3.5-turbo\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a professional content summarizer. Create a concise, informative summary in English. The summary should be 3-4 sentences long, capture the main points, and focus on key insights and important information. Make sure the summary is coherent and well-structured.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Please summarize this blog post:\\n\\nTitle: {{ $json.title }}\\n\\nContent: {{ $json.content }}\"\n    }\n  ],\n  \"max_tokens\": 400,\n  \"temperature\": 0.7\n}"
      },
      "name": "Generate English Summary",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [800, 300]
    },
    {
      "id": "5",
      "parameters": {
        "functionCode": "// Extract and validate the English summary from OpenAI response\nconst openaiResponse = $json;\n\nif (!openaiResponse.choices || openaiResponse.choices.length === 0) {\n  return [{\n    json: {\n      englishSummary: 'Summary not available. Please try again.',\n      error: 'No summary generated by OpenAI'\n    }\n  }];\n}\n\nconst englishSummary = openaiResponse.choices[0].message.content.trim();\n\n// Validate that we have a meaningful summary\nif (englishSummary.length < 50) {\n  return [{\n    json: {\n      englishSummary: 'Summary too short. Please try again.',\n      error: 'Generated summary is too short'\n    }\n  }];\n}\n\nconsole.log('English summary generated:', englishSummary);\n\nreturn [{\n  json: {\n    englishSummary: englishSummary,\n    originalUrl: $('Webhook').first().$json.url,\n    title: $('Extract Blog Content').first().$json.title\n  }\n}];"
      },
      "name": "Extract English Summary",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1000, 300]
    },
    {
      "id": "6",
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "method": "POST",
        "authentication": "none",
        "responseFormat": "json",
        "jsonParameters": true,
        "options": {
          "timeout": 60000
        },
        "headers": [
          {
            "name": "Content-Type",
            "value": "application/json"
          },
          {
            "name": "Authorization",
            "value": "Bearer {{ $env.OPENAI_API_KEY }}"
          }
        ],
        "bodyParametersJson": "{\n  \"model\": \"gpt-3.5-turbo\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a professional translator specializing in English to Urdu translation. Translate the given English text to clear, readable Urdu. Maintain the meaning and tone of the original text. Use proper Urdu grammar and vocabulary. Ensure the translation is natural and flows well in Urdu.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Please translate this English summary to Urdu:\\n\\n{{ $json.englishSummary }}\"\n    }\n  ],\n  \"max_tokens\": 600,\n  \"temperature\": 0.3\n}"
      },
      "name": "Translate to Urdu",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1200, 300]
    },
    {
      "id": "7",
      "parameters": {
        "functionCode": "// Extract and validate the Urdu translation from OpenAI response\nconst openaiResponse = $json;\n\nif (!openaiResponse.choices || openaiResponse.choices.length === 0) {\n  return [{\n    json: {\n      urduSummary: 'معذرت، اردو ترجمہ دستیاب نہیں ہے۔ براہ کرم دوبارہ کوشش کریں۔',\n      error: 'Translation failed'\n    }\n  }];\n}\n\nconst urduSummary = openaiResponse.choices[0].message.content.trim();\n\n// Validate that we have a meaningful translation\nif (urduSummary.length < 30) {\n  return [{\n    json: {\n      urduSummary: 'معذرت، ترجمہ مکمل نہیں ہو سکا۔ براہ کرم دوبارہ کوشش کریں۔',\n      error: 'Translation too short'\n    }\n  }];\n}\n\n// Get data from previous nodes\nconst englishSummary = $('Extract English Summary').first().$json.englishSummary;\nconst originalUrl = $('Extract English Summary').first().$json.originalUrl;\nconst title = $('Extract English Summary').first().$json.title;\n\nconsole.log('Urdu translation completed:', urduSummary);\n\nreturn [{\n  json: {\n    urduSummary: urduSummary,\n    englishSummary: englishSummary,\n    originalUrl: originalUrl,\n    title: title,\n    success: true\n  }\n}];"
      },
      "name": "Format Final Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1400, 300]
    },
    {
      "id": "8",
      "parameters": {
        "functionCode": "// Enhanced error handling node\nconst error = $json.error || 'Unknown error occurred';\n\nconsole.log('Error occurred:', error);\n\nreturn [{\n  json: {\n    urduSummary: 'معذرت، بلاگ کا خلاصہ نہیں بنایا جا سکا۔ براہ کرم یقینی بنائیں کہ URL صحیح ہے اور دوبارہ کوشش کریں۔',\n    englishSummary: 'Sorry, we could not summarize this blog. Please ensure the URL is correct and try again.',\n    error: error,\n    success: false\n  }\n}];"
      },
      "name": "Handle Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [600, 450]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Fetch Blog Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Blog Content": {
      "main": [
        [
          {
            "node": "Extract Blog Content",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Handle Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Blog Content": {
      "main": [
        [
          {
            "node": "Generate English Summary",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Handle Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate English Summary": {
      "main": [
        [
          {
            "node": "Extract English Summary",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Handle Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract English Summary": {
      "main": [
        [
          {
            "node": "Translate to Urdu",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Translate to Urdu": {
      "main": [
        [
          {
            "node": "Format Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Handle Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "name": "Blog Summariser (Enhanced)"
}